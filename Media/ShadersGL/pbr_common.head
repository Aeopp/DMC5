
#define PI				3.1415926535897932
#define TWO_PI			6.2831853071795864
#define HALF_PI			1.5707963267948966
#define ONE_OVER_PI		0.3183098861837906
#define EPSILON			1e-5				// to avoid division with zero

uniform sampler2D baseColorSamp;

uniform vec4 baseColor;
uniform vec4 matParams;			// roughness, metalness, hastexture, hasnormalmap

float Random(vec3 pixel, vec3 scale, float seed)
{
	return fract(sin(dot(pixel + seed, scale)) * 43758.5453 + seed);
}

vec3 F_Schlick(vec3 f0, float u)
{
	return f0 + (vec3(1.0) - f0) * pow(1.0 - u + EPSILON, 5.0);
}

float D_GGX(float ndoth, float roughness)
{
	// Disney's suggestion
	float a = roughness * roughness;
	float a2 = a * a;

	// optimized formula for the GPU
	float d = (ndoth * a2 - ndoth) * ndoth + 1.0;

	return a2 / (PI * d * d + EPSILON);
}

float Vis_Schlick(float ndotl, float ndotv, float roughness)
{
	// Disney's suggestion
	float a = roughness + 1.0;
	float k = a * a * 0.125;

	// shadowing/masking functions
	float G1_l = ndotl * (1 - k) + k;
	float G1_v = ndotv * (1 - k) + k;

	// = G_Schlick / (4 * ndotv * ndotl)
	return 0.25 / (G1_l * G1_v + EPSILON);
}

vec3 TransformToHemisphere(vec3 n, float phi, float costheta)
{
	vec3 h;
	float sintheta = sqrt(1 - costheta * costheta);

	h.x = sintheta * cos(phi);
	h.y = sintheta * sin(phi);
	h.z = costheta;

	vec3 up = ((abs(n.z) < 0.999) ? vec3(0, 0, 1) : vec3(1, 0, 0));
	vec3 tangent = normalize(cross(up, n));
	vec3 bitangent = cross(n, tangent);

	return tangent * h.x + bitangent * h.y + n * h.z;
}

vec3 CosineSample(vec3 n, vec3 pixel, float seed)
{
	float u = Random(pixel, vec3(12.9898, 78.233, 151.7182), seed);
	float v = Random(pixel, vec3(63.7264, 10.873, 623.6736), seed);

	float phi = TWO_PI * u;
	float costheta = sqrt(v);

	// PDF = cos(theta) / PI
	return TransformToHemisphere(n, phi, costheta);
}

vec4 BRDF_Lambertian(vec2 tex)
{
	vec4 albedo = texture(baseColorSamp, tex);
	vec4 color = mix(baseColor, albedo, matParams.z);

	color.rgb = mix(color.rgb, vec3(0.0), matParams.y);
	color.rgb *= ONE_OVER_PI;

	return color;
}

vec3 BRDF_CookTorrance(float ldoth, float ndoth, float ndotv, float ndotl, float roughness)
{
	vec3 F0 = mix(vec3(0.04), baseColor.rgb, matParams.y);
	vec3 F = F_Schlick(F0, ldoth);

	float Vis = Vis_Schlick(ndotl, ndotv, roughness);
	float D = D_GGX(ndoth, roughness);

	return F * Vis * D;
}
